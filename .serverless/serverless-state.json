{
  "service": {
    "service": "esg-app-planning-poker",
    "serviceObject": {
      "name": "esg-app-planning-poker"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "stage": "dev",
      "region": "eu-west-1",
      "memorySize": 1024,
      "endpointType": "regional",
      "environment": {
        "NODE_ENV": "production"
      },
      "stackTags": {
        "name": "planning poker",
        "group": "ESG",
        "status": "dev",
        "pushed_by": "github",
        "defined_in": "serverless",
        "repo_name": "esg-app-planning-poker",
        "team": "ESG Teaching and Learning"
      },
      "apiGateway": {
        "minimumCompressionSize": 1000
      },
      "iam": {
        "role": {
          "name": "planning-poker-role-dev",
          "statements": [
            {
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "PokerTable",
                  "Arn"
                ]
              },
              "Action": [
                "dynamodb:Scan"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "PokerTable",
                  "Arn"
                ]
              },
              "Action": [
                "dynamodb:GetItem"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "PokerTable",
                  "Arn"
                ]
              },
              "Action": [
                "dynamodb:PutItem"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "PokerTable",
                  "Arn"
                ]
              },
              "Action": [
                "dynamodb:UpdateItem"
              ]
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ServerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/esg-app-planning-poker-dev-server"
            }
          },
          "GetRoomLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/esg-app-planning-poker-dev-getRoom"
            }
          },
          "CreateRoomLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/esg-app-planning-poker-dev-createRoom"
            }
          },
          "JoinRoomLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/esg-app-planning-poker-dev-joinRoom"
            }
          },
          "SubmitChoiceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/esg-app-planning-poker-dev-submitChoice"
            }
          },
          "RevealRoomLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/esg-app-planning-poker-dev-revealRoom"
            }
          },
          "ResetRoomLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/esg-app-planning-poker-dev-resetRoom"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "esg-app-planning-poker",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/esg-app-planning-poker-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/esg-app-planning-poker-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][3]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": "planning-poker-role-dev"
            }
          },
          "ServerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/esg-app-planning-poker/dev/1647616246665-2022-03-18T15:10:46.665Z/esg-app-planning-poker.zip"
              },
              "Handler": "index.server",
              "Runtime": "nodejs14.x",
              "FunctionName": "esg-app-planning-poker-dev-server",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "production"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ServerLogGroup"
            ]
          },
          "GetRoomLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/esg-app-planning-poker/dev/1647616246665-2022-03-18T15:10:46.665Z/esg-app-planning-poker.zip"
              },
              "Handler": "index.getRoom",
              "Runtime": "nodejs14.x",
              "FunctionName": "esg-app-planning-poker-dev-getRoom",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "production",
                  "POKER_TABLE": "planning-poker-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetRoomLogGroup"
            ]
          },
          "CreateRoomLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/esg-app-planning-poker/dev/1647616246665-2022-03-18T15:10:46.665Z/esg-app-planning-poker.zip"
              },
              "Handler": "index.createRoom",
              "Runtime": "nodejs14.x",
              "FunctionName": "esg-app-planning-poker-dev-createRoom",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "production",
                  "POKER_TABLE": "planning-poker-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateRoomLogGroup"
            ]
          },
          "JoinRoomLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/esg-app-planning-poker/dev/1647616246665-2022-03-18T15:10:46.665Z/esg-app-planning-poker.zip"
              },
              "Handler": "index.joinRoom",
              "Runtime": "nodejs14.x",
              "FunctionName": "esg-app-planning-poker-dev-joinRoom",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "production",
                  "POKER_TABLE": "planning-poker-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "JoinRoomLogGroup"
            ]
          },
          "SubmitChoiceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/esg-app-planning-poker/dev/1647616246665-2022-03-18T15:10:46.665Z/esg-app-planning-poker.zip"
              },
              "Handler": "index.submitChoice",
              "Runtime": "nodejs14.x",
              "FunctionName": "esg-app-planning-poker-dev-submitChoice",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "production",
                  "POKER_TABLE": "planning-poker-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SubmitChoiceLogGroup"
            ]
          },
          "RevealRoomLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/esg-app-planning-poker/dev/1647616246665-2022-03-18T15:10:46.665Z/esg-app-planning-poker.zip"
              },
              "Handler": "index.revealRoom",
              "Runtime": "nodejs14.x",
              "FunctionName": "esg-app-planning-poker-dev-revealRoom",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "production",
                  "POKER_TABLE": "planning-poker-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RevealRoomLogGroup"
            ]
          },
          "ResetRoomLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/esg-app-planning-poker/dev/1647616246665-2022-03-18T15:10:46.665Z/esg-app-planning-poker.zip"
              },
              "Handler": "index.resetRoom",
              "Runtime": "nodejs14.x",
              "FunctionName": "esg-app-planning-poker-dev-resetRoom",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "production",
                  "POKER_TABLE": "planning-poker-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ResetRoomLogGroup"
            ]
          },
          "ServerLambdaVersionWVYcwXgGOtEyCIjpnPJ2Cm8BT1kawjhD7i4deXQZlEo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ServerLambdaFunction"
              },
              "CodeSha256": "4+EeTTUUOFEViwnTzIg/HyWBF/g4EiJywQD4X2E0gfw="
            }
          },
          "GetRoomLambdaVersionqSmHGZ8DYwsYT54lYvhqEdl1EotiyjqkUkw4vn724": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetRoomLambdaFunction"
              },
              "CodeSha256": "4+EeTTUUOFEViwnTzIg/HyWBF/g4EiJywQD4X2E0gfw="
            }
          },
          "CreateRoomLambdaVersionwd99x192EqrUrEqoNassBeWh2zbJyYwrwXPj5PZP8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateRoomLambdaFunction"
              },
              "CodeSha256": "4+EeTTUUOFEViwnTzIg/HyWBF/g4EiJywQD4X2E0gfw="
            }
          },
          "JoinRoomLambdaVersionUKTQs8bktMlF92SyVyWdpSpjOPXVjXfG3hsrscCT6I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "JoinRoomLambdaFunction"
              },
              "CodeSha256": "4+EeTTUUOFEViwnTzIg/HyWBF/g4EiJywQD4X2E0gfw="
            }
          },
          "SubmitChoiceLambdaVersion4CH7fjo2362YjEq07s0zDM1McJEVAINJFRyQQJF1pw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SubmitChoiceLambdaFunction"
              },
              "CodeSha256": "4+EeTTUUOFEViwnTzIg/HyWBF/g4EiJywQD4X2E0gfw="
            }
          },
          "RevealRoomLambdaVersion3udOTiv8e7pAAxY8MoAraIFSq1NJuU4ZqqoBWs62o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RevealRoomLambdaFunction"
              },
              "CodeSha256": "4+EeTTUUOFEViwnTzIg/HyWBF/g4EiJywQD4X2E0gfw="
            }
          },
          "ResetRoomLambdaVersion4bnDQb2sDAHCe9i45kyvoTBkQQY0QNQzuznHANgMtI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ResetRoomLambdaFunction"
              },
              "CodeSha256": "4+EeTTUUOFEViwnTzIg/HyWBF/g4EiJywQD4X2E0gfw="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-esg-app-planning-poker",
              "EndpointConfiguration": {
                "Types": [
                  "REGIONAL"
                ]
              },
              "Policy": "",
              "MinimumCompressionSize": 1000
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRoom": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "room",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRoomIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceRoom"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRoomIdVarJoin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceRoomIdVar"
              },
              "PathPart": "join",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRoomIdVarChoice": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceRoomIdVar"
              },
              "PathPart": "choice",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRoomIdVarReveal": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceRoomIdVar"
              },
              "PathPart": "reveal",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRoomIdVarReset": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceRoomIdVar"
              },
              "PathPart": "reset",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRoomIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoomIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRoomOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoom"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRoomIdVarJoinOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoomIdVarJoin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRoomIdVarChoiceOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoomIdVarChoice"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRoomIdVarRevealOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoomIdVarReveal"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRoomIdVarResetOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoomIdVarReset"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ServerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ServerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ServerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ServerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRoomIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoomIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetRoomLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetRoomLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRoomPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoom"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateRoomLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateRoomLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRoomIdVarJoinPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoomIdVarJoin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "JoinRoomLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "JoinRoomLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRoomIdVarChoicePut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoomIdVarChoice"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SubmitChoiceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SubmitChoiceLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRoomIdVarRevealPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoomIdVarReveal"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RevealRoomLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RevealRoomLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRoomIdVarResetPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRoomIdVarReset"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ResetRoomLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ResetRoomLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1647616230680": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodRoomIdVarOptions",
              "ApiGatewayMethodRoomOptions",
              "ApiGatewayMethodRoomIdVarJoinOptions",
              "ApiGatewayMethodRoomIdVarChoiceOptions",
              "ApiGatewayMethodRoomIdVarRevealOptions",
              "ApiGatewayMethodRoomIdVarResetOptions",
              "ApiGatewayMethodAny",
              "ApiGatewayMethodProxyVarAny",
              "ApiGatewayMethodRoomIdVarGet",
              "ApiGatewayMethodRoomPost",
              "ApiGatewayMethodRoomIdVarJoinPost",
              "ApiGatewayMethodRoomIdVarChoicePut",
              "ApiGatewayMethodRoomIdVarRevealPost",
              "ApiGatewayMethodRoomIdVarResetPost"
            ]
          },
          "ServerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ServerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetRoomLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetRoomLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateRoomLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateRoomLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "JoinRoomLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "JoinRoomLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SubmitChoiceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SubmitChoiceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RevealRoomLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RevealRoomLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ResetRoomLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ResetRoomLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PokerTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "planning-poker-dev",
              "BillingMode": "PROVISIONED",
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-esg-app-planning-poker-dev-ServerlessDeploymentBucketName"
            }
          },
          "ServerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ServerLambdaVersionWVYcwXgGOtEyCIjpnPJ2Cm8BT1kawjhD7i4deXQZlEo"
            },
            "Export": {
              "Name": "sls-esg-app-planning-poker-dev-ServerLambdaFunctionQualifiedArn"
            }
          },
          "GetRoomLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetRoomLambdaVersionqSmHGZ8DYwsYT54lYvhqEdl1EotiyjqkUkw4vn724"
            },
            "Export": {
              "Name": "sls-esg-app-planning-poker-dev-GetRoomLambdaFunctionQualifiedArn"
            }
          },
          "CreateRoomLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateRoomLambdaVersionwd99x192EqrUrEqoNassBeWh2zbJyYwrwXPj5PZP8"
            },
            "Export": {
              "Name": "sls-esg-app-planning-poker-dev-CreateRoomLambdaFunctionQualifiedArn"
            }
          },
          "JoinRoomLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "JoinRoomLambdaVersionUKTQs8bktMlF92SyVyWdpSpjOPXVjXfG3hsrscCT6I"
            },
            "Export": {
              "Name": "sls-esg-app-planning-poker-dev-JoinRoomLambdaFunctionQualifiedArn"
            }
          },
          "SubmitChoiceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SubmitChoiceLambdaVersion4CH7fjo2362YjEq07s0zDM1McJEVAINJFRyQQJF1pw"
            },
            "Export": {
              "Name": "sls-esg-app-planning-poker-dev-SubmitChoiceLambdaFunctionQualifiedArn"
            }
          },
          "RevealRoomLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RevealRoomLambdaVersion3udOTiv8e7pAAxY8MoAraIFSq1NJuU4ZqqoBWs62o"
            },
            "Export": {
              "Name": "sls-esg-app-planning-poker-dev-RevealRoomLambdaFunctionQualifiedArn"
            }
          },
          "ResetRoomLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ResetRoomLambdaVersion4bnDQb2sDAHCe9i45kyvoTBkQQY0QNQzuznHANgMtI"
            },
            "Export": {
              "Name": "sls-esg-app-planning-poker-dev-ResetRoomLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-esg-app-planning-poker-dev-ServiceEndpoint"
            }
          }
        },
        "Conditions": {
          "UseCustomDomainName": {
            "Fn::Not": [
              {
                "Fn::Equals": [
                  "",
                  ""
                ]
              }
            ]
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "apigwBinary": {
        "types": [
          "*/*"
        ]
      },
      "domainName": "",
      "sslCertificateArn": ""
    },
    "plugins": [
      "serverless-apigw-binary"
    ],
    "pluginsData": {},
    "functions": {
      "server": {
        "handler": "index.server",
        "events": [
          {
            "http": "ANY /"
          },
          {
            "http": "ANY /{proxy+}"
          }
        ],
        "name": "esg-app-planning-poker-dev-server",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ServerLambdaVersionWVYcwXgGOtEyCIjpnPJ2Cm8BT1kawjhD7i4deXQZlEo"
      },
      "getRoom": {
        "handler": "index.getRoom",
        "environment": {
          "POKER_TABLE": "planning-poker-dev"
        },
        "events": [
          {
            "http": {
              "path": "room/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "esg-app-planning-poker-dev-getRoom",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetRoomLambdaVersionqSmHGZ8DYwsYT54lYvhqEdl1EotiyjqkUkw4vn724"
      },
      "createRoom": {
        "handler": "index.createRoom",
        "environment": {
          "POKER_TABLE": "planning-poker-dev"
        },
        "events": [
          {
            "http": {
              "path": "room",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "esg-app-planning-poker-dev-createRoom",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateRoomLambdaVersionwd99x192EqrUrEqoNassBeWh2zbJyYwrwXPj5PZP8"
      },
      "joinRoom": {
        "handler": "index.joinRoom",
        "environment": {
          "POKER_TABLE": "planning-poker-dev"
        },
        "events": [
          {
            "http": {
              "path": "room/{id}/join",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "esg-app-planning-poker-dev-joinRoom",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "JoinRoomLambdaVersionUKTQs8bktMlF92SyVyWdpSpjOPXVjXfG3hsrscCT6I"
      },
      "submitChoice": {
        "handler": "index.submitChoice",
        "environment": {
          "POKER_TABLE": "planning-poker-dev"
        },
        "events": [
          {
            "http": {
              "path": "room/{id}/choice",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "esg-app-planning-poker-dev-submitChoice",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "SubmitChoiceLambdaVersion4CH7fjo2362YjEq07s0zDM1McJEVAINJFRyQQJF1pw"
      },
      "revealRoom": {
        "handler": "index.revealRoom",
        "environment": {
          "POKER_TABLE": "planning-poker-dev"
        },
        "events": [
          {
            "http": {
              "path": "room/{id}/reveal",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "esg-app-planning-poker-dev-revealRoom",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "RevealRoomLambdaVersion3udOTiv8e7pAAxY8MoAraIFSq1NJuU4ZqqoBWs62o"
      },
      "resetRoom": {
        "handler": "index.resetRoom",
        "environment": {
          "POKER_TABLE": "planning-poker-dev"
        },
        "events": [
          {
            "http": {
              "path": "room/{id}/reset",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "esg-app-planning-poker-dev-resetRoom",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ResetRoomLambdaVersion4bnDQb2sDAHCe9i45kyvoTBkQQY0QNQzuznHANgMtI"
      }
    },
    "resources": {
      "Conditions": {
        "UseCustomDomainName": {
          "Fn::Not": [
            {
              "Fn::Equals": [
                "",
                ""
              ]
            }
          ]
        }
      },
      "Resources": {
        "PokerTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "planning-poker-dev",
            "BillingMode": "PROVISIONED",
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "esg-app-planning-poker",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "package": {
        "include": [
          ".env",
          ".env.local",
          "node_modules/@babel/runtime/**"
        ],
        "exclude": [
          ".*",
          ".gradle/**",
          ".github/**",
          ".idea/**",
          "docs/**",
          "src/**",
          "package.json",
          "package-lock.json",
          "README.md",
          "tsconfig.tsbuildinfo",
          "tsconfig.json",
          ".next/cache/webpack/client-development/**",
          ".next/cache/webpack/client-development-fallback/**",
          ".next/cache/webpack/server-development/**",
          "node_modules/smartify-lib/node_modules/**",
          "node_modules/@babel/**",
          "node_modules/ally.js/**",
          "node_modules/caniuse-lite/**",
          "node_modules/lodash/**",
          "node_modules/webpack/**",
          "node_modules/terser/**",
          "node_modules/es5-ext/**",
          "node_modules/resolve-url-loader/**",
          "node_modules/postcss/**",
          "node_modules/acorn/**",
          "node_modules/ajv/**",
          "node_modules/@webassemblyjs/**",
          "node_modules/cssnano-preset-simple/**",
          "node_modules/snapdragon/**",
          "node_modules/regenerate-unicode-properties/**",
          "node_modules/pako/**",
          "node_modules/source-map/**",
          "node_modules/bluebird/**",
          "node_modules/uri-js/**",
          "node_modules/ast-types/**",
          "node_modules/watchpack-chokidar2/**",
          "node_modules/terser-webpack-plugin/**",
          "node_modules/core-js-compat/**",
          "node_modules/neo-async/**",
          "node_modules/postcss-selector-parser/**",
          "node_modules/css-loader/**",
          "node_modules/sass-loader/**",
          "node_modules/buffer/**",
          "node_modules/adjust-sourcemap-loader/**",
          "node_modules/ext/**",
          "node_modules/tr46/**",
          "node_modules/micromatch/**",
          "node_modules/@ampproject/**",
          "node_modules/postcss-modules-parser/**",
          "node_modules/css-modules-loader-core/**",
          "node_modules/babel-plugin-react-css-modules/**",
          "node_modules/es-abstract/**",
          "node_modules/string.prototype.trimstart/**",
          "node_modules/string.prototype.trimend/**",
          "node_modules/**/CHANGELOG*",
          "node_modules/**/README*",
          "node_modules/*/test/**",
          "node_modules/**/.github/**",
          "node_modules/@opentelemetry/**",
          "node_modules/encoding/**",
          "node_modules/@next/swc-android-arm64/**",
          "node_modules/@next/swc-darwin-arm64/**",
          "node_modules/@next/swc-darwin-x64/**",
          "node_modules/@next/swc-linux-arm64-gnu/**",
          "node_modules/@next/swc-linux-arm64-musl/**",
          "node_modules/@next/swc-linux-arm-gnueabihf/**",
          "node_modules/@next/swc-linux-x64-gnu/**",
          "node_modules/@next/swc-linux-x64-musl/**",
          "node_modules/@next/swc-win32-arm64-msvc/**",
          "node_modules/@next/swc-win32-x64-msvc/**",
          "node_modules/@next/swc-win32-ia32-msvc/**",
          "node_modules/next/dist/compiled/babel/**",
          "node_modules/next/dist/compiled/babel-packages/**"
        ],
        "artifactsS3KeyDirname": "serverless/esg-app-planning-poker/dev/code-artifacts",
        "artifact": "/home/christian/Projects/planning-poker/.serverless/esg-app-planning-poker.zip",
        "artifactDirectoryName": "serverless/esg-app-planning-poker/dev/1647616246665-2022-03-18T15:10:46.665Z"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "artifact": "/home/christian/Projects/planning-poker/.serverless/esg-app-planning-poker.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/esg-app-planning-poker/dev/1647616246665-2022-03-18T15:10:46.665Z",
    "artifact": "esg-app-planning-poker.zip"
  }
}